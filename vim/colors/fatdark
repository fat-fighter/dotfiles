"
"	███████				 ███										  ████
"  ░███░░███			░███			 ░░███						 ░░███	 ███
"  ░███ ░░░   ██████	██████			  ░███	██████	  ████████	  ░███	███
"  ██████	 ░░░░░███  ░░███░		   ███████ ░░░░░███   ░░███░░███  ░███ ███
" ░░███░	  ███████	░███		  ███░░███	███████    ░███ ░░░   ░██████
"  ░███		 ███░░███	░███  █		 ░███░░███ ███░░███    ░███		  ░███░░███
"  █████	 ░████████	░░████	 ███ ░░██████  ░████████   █████	  █████░░████
" ░░░░░		 ░░░░░░░░	 ░░░░	░░░   ░░░░░░   ░░░░░░░░   ░░░░░		 ░░░░░	░░░░
"
" ======================================================================================
"   Name:       fat.dark
"   Author:     Gurpreet Singh
"   Url:        https://github.com/ffs97/dotfiles/vim/colors
"   License:    The MIT License (MIT)
"
"   A dark vim color theme based on Draculy and One-Half
" ======================================================================================

set background=dark
highlight clear

if exists("syntax_on")
	syntax reset
endif

let g:colors_name = "fatdark"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Defining Function for Setting Colors

function! s:set_color(group, fg, bg, attr)
	if type(a:fg) == type({})
		exec "hi " . a:group . " guifg=" . a:fg.gui
	else
		exec "hi " . a:group . " guifg=NONE cterm=NONE"
	endif
	if type(a:bg) == type({})
		exec "hi " . a:group . " guibg=" . a:bg.gui
	else
		exec "hi " . a:group . " guibg=NONE ctermbg=NONE"
	endif
	if a:attr != ""
		exec "hi " . a:group . " gui=" . a:attr . " cterm=" . a:attr
	else
		exec "hi " . a:group . " gui=NONE cterm=NONE"
	endif
endfun

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Defining Colors for fat.dark

let s:bg = { "gui": "#252c36" }
let s:fg = { "gui": "#fafafa" }

let s:red = { "gui": "#ff5555" }
let s:blue = { "gui": "#afbfff" }
let s:pink = { "gui": "#ff79c6" }
let s:cyan = { "gui": "#3bf2ea" }
let s:khaki = { "gui": "#f5f8d6" }
let s:green = { "gui": "#88b369" }
let s:yellow = { "gui": "#f1fa8c" }
let s:purple = { "gui": "#800080" }
let s:orange = { "gui": "#ffb86c" }
let s:seagreen = { "gui": "#56b6b2" }
let s:darkgray = { "gui": "#434356" }
let s:darkkhaki = { "gui": "#b5c79b" }
let s:darkseagreen = { "gui": "#555579" }
let s:line_num = { "gui": "#4590a0" }

let s:highlight_line = { "gui": "#3a3545" }

let s:color_col = s:highlight_line
let s:cursor_col = { "gui": "#aec7c6" }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Setting the Colors

" User Interface {{

" Normal {
call s:set_color("Normal", s:fg, s:bg, "")
call s:set_color("NonText", s:bg, s:bg, "")
call s:set_color("EndOfBuffer", s:bg, "", "")
" }

" Cursor {
call s:set_color("Cursor", s:bg, s:cursor_col, "")
call s:set_color("CursorLine", "", s:highlight_line, "")
" }

" Column colors {
call s:set_color("ColorColumn", "", s:color_col, "")
call s:set_color("CursorColumn", "", s:color_col, "")
" }

" Line Numbers {
call s:set_color("LineNrAbove", "", "", "")
call s:set_color("LineNrBelow", "", "", "")
call s:set_color("LineNr", s:line_num, s:bg, "")
call s:set_color("CursorLineNr", s:fg, s:highlight_line, "bold")
" }

" Diff {
call s:set_color("DiffAdd", s:green, "", "")
call s:set_color("DiffChange", s:seagreen, "", "")
call s:set_color("DiffDelete", s:red, "", "")
call s:set_color("DiffText", s:blue, "", "")
" }

" Search {
call s:set_color("Search", s:bg, s:yellow, "")
call s:set_color("IncSearch", s:bg, s:yellow, "")
" }

" Messages and texts {
call s:set_color("ModeMsg", s:fg, "", "")
call s:set_color("ErrorMsg", s:red, "", "")
call s:set_color("Title", s:pink, "", "bold")
call s:set_color("MoreMsg", s:yellow, "", "")
call s:set_color("Question", s:yellow, "", "")
call s:set_color("WarningMsg", s:pink, "", "")
call s:set_color("QuickFixLine", s:yellow, "", "")
" }

" Spelling erros {
call s:set_color("SpellRare", "", "", "")
call s:set_color("SpellBad", "", "", "undercurl")
call s:set_color("SpellCap", "", "", "undercurl")
call s:set_color("SpellLocal", "", "", "undercurl")
" }

" Selection (Visual) Mode {
call s:set_color("Visual", "", s:darkgray, "")
call s:set_color("VisualNOS", "", s:darkgray, "")
" }

" Status line (overruled by airline/lightline) {
call s:set_color("StatusLine", s:cyan, s:highlight_line, "italic")
call s:set_color("StatusLineNC", s:bg, s:bg, "italic")
call s:set_color("StatusLineTerm", s:cyan, s:highlight_line, "italic")
call s:set_color("StatusLineTermNC", s:bg, s:bg, "italic")
" }

" Tab line (overruled by airline/lightline) {
call s:set_color("TabLine", s:seagreen, s:highlight_line, "")
call s:set_color("TabLineFill", s:cursor_col, s:highlight_line, "")
call s:set_color("TabLineSel", s:cyan, s:bg, "")
" }

" Folding
call s:set_color("Folded", s:seagreen, "", "")
call s:set_color("FoldColumn", s:fg, "", "")

" Signs
call s:set_color("SignColumn", s:orange, "", "")

" Concealed Text
call s:set_color("Conceal", s:fg, "", "")

" Matching brackets
call s:set_color("MatchParen", s:cyan, "", "bold,underline")

" Vertical split
call s:set_color("VertSplit", s:highlight_line, s:bg, "")

" Special keys
call s:set_color("Special", s:pink, "", "")
call s:set_color("SpecialChar", s:fg, "", "")
call s:set_color("SpecialComment", s:red, "", "")

" Directory text
call s:set_color("Directory", s:blue, "", "")

" Popup Menu
call s:set_color("Pmenu", s:fg, s:highlight_line, "")
call s:set_color("PmenuSel", s:blue, s:bg, "bold")
call s:set_color("PmenuSbar", "", s:seagreen, "")
call s:set_color("PmenuThumb", "", s:fg, "")

" Miscellaneous
call s:set_color("ExtraWhitespace", "", s:highlight_line, "")
match ExtraWhitespace /\s\+$/

" TODO: Fix {
" call s:set_color("Menu", "", "", "")
" call s:set_color("Toolbar", "", "", "")
" call s:set_color("Tooltip", "", "", "")
" call s:set_color("Terminal", "", "", "")
" call s:set_color("WildMenu", s:fg, "", "")
" call s:set_color("ToolbarLine", "", "", "")
" call s:set_color("ToolbarButton", "", "", "")
" call s:set_color("Scrollbar", s:bg, s:bg, "")
" }

" }}


" Syntax {{

call s:set_color("Boolean", s:fg, "", "")
call s:set_color("Character", s:green, "", "")
call s:set_color("Comment", s:seagreen, "", "")
call s:set_color("Conditional", s:blue, "", "")
call s:set_color("Conditional", s:yellow, "", "")
call s:set_color("Constant", s:orange, "", "")
call s:set_color("Debug", s:fg, "", "")
call s:set_color("Define", s:red, "", "")
call s:set_color("Delimiter", s:fg, "", "")
call s:set_color("Error", s:red, "", "undercurl")
call s:set_color("Exception", s:purple, "", "")
call s:set_color("Float", s:orange, "", "")
call s:set_color("Function", s:red, "", "bold")
call s:set_color("Identifier", s:darkkhaki, "", "")
call s:set_color("Ignore", s:fg, "", "")
call s:set_color("Include", s:blue, "", "")
call s:set_color("Include", s:yellow, "", "")
call s:set_color("Keyword", s:red, "", "")
call s:set_color("Label", s:cyan, "", "")
call s:set_color("Macro", s:blue, "", "")
call s:set_color("Number", s:orange, "", "")
call s:set_color("Operator", s:fg, "", "")
call s:set_color("PreCondit", s:darkkhaki, "", "")
call s:set_color("PreProc", s:darkkhaki, "", "")
call s:set_color("Repeat", s:blue, "", "")
call s:set_color("Repeat", s:yellow, "", "")
call s:set_color("Statement", s:blue, "", "")
call s:set_color("StorageClass", s:yellow, "", "")
call s:set_color("String", s:khaki, "", "")
call s:set_color("Structure", s:yellow, "", "")
call s:set_color("Tag", s:fg, "", "")
call s:set_color("Todo", s:red, "", "bold,underline")
call s:set_color("Type", s:cyan, "", "")
call s:set_color("Typedef", s:orange, "", "")
call s:set_color("Underlined", "", "", "underline")

" }}

" Vim highlight links {{

hi link vimFunction Function
hi link vimIsCommand PreProc

" }}
